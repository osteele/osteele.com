---
import type { Project } from "../data/projects.types";
import type { ProjectType, Section } from "../lib/sections";
import { getProjectsByCategory } from "../lib/sections";
import ProjectSection from "./ProjectSection.astro";

interface Props {
	sections?: Section[];
	projects?: Project[];
	showTypeLabels?: boolean;
	displayMode?: "cards" | "text";
	languageFilter?: string[];
}

// Props are referenced in the template
const { sections = [], projects = [], showTypeLabels = false, displayMode = "cards", languageFilter } = Astro.props;

// Apply language filter if provided
const filteredProjects =
	languageFilter && languageFilter.length > 0
		? projects.filter((project) => {
				// If primaryLanguage is defined and matches any of the languages in the filter
				return project.primaryLanguage && languageFilter.includes(project.primaryLanguage);
			})
		: projects;

// Set to keep track of projects assigned to any section/subsection
const assignedProjects = new Set<Project>();

// Pre-filter sections to only include those with projects
// and collect assigned projects
const sectionsWithProjects = sections.filter((section: Section) => {
	const projectData = getProjectsByCategory(section, filteredProjects);
	const hasProjects =
		projectData.sectionProjects.length > 0 ||
		Array.from(projectData.subsectionProjects.values()).some((arr) => arr.length > 0);

	if (hasProjects) {
		projectData.sectionProjects.forEach((p: Project) => assignedProjects.add(p));
		projectData.subsectionProjects.forEach((list) => list.forEach((p: Project) => assignedProjects.add(p)));
	}
	return hasProjects;
});

// Find projects that were not assigned to any section
const unassignedProjects = filteredProjects.filter((p: Project) => !assignedProjects.has(p));

// Define a generic "Other" section if there are unassigned projects
const otherSection: Section | null =
	unassignedProjects.length > 0
		? {
				id: "other-projects",
				name: "Other Projects",
				color: "from-gray-500", // Generic color
				titleColor: "from-gray-500 to-gray-300",
				description: "Projects that do not fit in other categories.",
				// No subsections or explicit categories needed here
			}
		: null;
---

<div>
  <!-- Navigation tabs for sections with projects -->
  <nav class="flex overflow-x-auto pb-2 hide-scrollbar">
    <div class="flex space-x-4">
      {sectionsWithProjects.map((section: Section) => (
        <a
          href={`#${section.id}`}
          class={`whitespace-nowrap px-3 py-2 rounded-lg text-sm font-medium 
            bg-gradient-to-r ${section.color}/5 hover:${section.color}/10 
            dark:bg-gradient-to-r dark:${section.color}/10 dark:hover:${section.color}/20 
            transition-all duration-200`}
        >
          <span class={`bg-gradient-to-r ${section.titleColor} bg-clip-text text-transparent`}>
            {section.name}
          </span>
        </a>
      ))}
      {/* Add tab for Other section if it exists */}
      {otherSection && (
        <a
          href={`#${otherSection.id}`}
          class={`whitespace-nowrap px-3 py-2 rounded-lg text-sm font-medium 
            bg-gradient-to-r ${otherSection.color}/5 hover:${otherSection.color}/10 
            dark:bg-gradient-to-r dark:${otherSection.color}/10 dark:hover:${otherSection.color}/20 
            transition-all duration-200`}
        >
          <span class={`bg-gradient-to-r ${otherSection.titleColor} bg-clip-text text-transparent`}>
            {otherSection.name}
          </span>
        </a>
      )}
    </div>
  </nav>

  <!-- Project sections -->
  <div class="mt-8">
    {sections.map((section: Section) => {
      const projectData = getProjectsByCategory(section, filteredProjects);
      // Only render section if it has projects
      if (
        projectData.sectionProjects.length === 0 &&
        Array.from(projectData.subsectionProjects.values()).every((arr) => arr.length === 0)
      ) {
        return null;
      }

      return (
        <ProjectSection
          section={section}
          projectData={projectData}
          showTypeLabels={showTypeLabels}
          displayMode={displayMode}
        />
      );
    })}

    {/* Render the Other section if it exists */}
    {otherSection && unassignedProjects.length > 0 && (
      <ProjectSection
        section={otherSection}
        projectData={{
          sectionProjects: unassignedProjects, // All unassigned projects go here
          subsectionProjects: new Map(), // No subsections for the generic "Other" section
        }}
        showTypeLabels={showTypeLabels}
        displayMode={displayMode}
      />
    )}
  </div>
</div>